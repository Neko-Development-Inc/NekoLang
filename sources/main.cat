#cat-flap :3
// Defines entrypoint

// Include 'test.cat' into this file
#pls test

// Create variable test_N with the value 3
uwu test_N < 3 >

// Include 'utils.cat' into a variable called 'u'
#pls 'utils.cat' as u

// Include 'test.cat' into this file, 3 times
#pls test
#pls test
#pls test

var text < "hello" >.< event changed e >.<
    // changed event stuff here
>
text < "trigger an on-change event" >

owo b < fact, fake >

u.Baggy()
// Execute the 'Baggy' function from 'utils'

// Class example
< box Box1 >.<

>

// Non-extendable class example
< !box Box2 >.<

>

// This is a comment

/*
This is a comment
*/

'''
This is a comment
'''

<--
This is a comment
-->

// This is a comment

-- This is a comment

// Class example, using Box1 as parent box
< box Box3 / Box1 >w<

>

// Create an instance of 'Box3'
create Box3()

// Class example, using Box2 as parent box
< box Box4 / Box2 >w< // This doesn't compile, as 'Box2' is marked non-extendable

>

// readonly variable
angy o < 3 >

// try-catch basically
scawy < <-- or spoopy -->
    o < 1 > // reassign o to 1 - throws exception, because o is angy
> oof <
    // catch the error
    println("SCAWY!!!")
> ah <
    // finally
    println("Finally :)")
>

// Json example (using real json functionality):
owo json <{
    testKey: 'test value'
}>
print(json.testKey) // prints 'test value'
json.testKey <'OwO'>
print(json.testKey) // prints 'OwO'

// math example:
owo a < 3 >         // 3
var b < a + 1 >     // 4
uwu c < a++ >       // 3 - assigns value 'a' THEN increments afterwards
var d < ++a >       // 4 - increments first THEN assigns value 'a'
owo e < a++ + a >   // 3 + 3 - assigns value 'a' + 'a' = 6, THEN increments afterwards
var f < a++ + ++a > // 3 + 4 - assigns value 'a' + 'a=a+1' = 7